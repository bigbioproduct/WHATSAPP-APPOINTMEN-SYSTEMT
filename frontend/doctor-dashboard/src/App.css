const express = require('express');
const path = require('path');
const { google } = require('googleapis');
const fs = require('fs');
const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(express.json());

// Serve the React app
app.use(express.static(path.join(__dirname, 'frontend', 'doctor-dashboard', 'build')));

// Google Sheets API setup
const credentialsPath = path.join(__dirname, 'jhatpatdoc-credentials.json');
if (!fs.existsSync(credentialsPath)) {
  console.error('Google Sheets credentials file not found.');
  process.exit(1);
}
const credentials = JSON.parse(fs.readFileSync(credentialsPath));
const client = new google.auth.JWT(
  credentials.client_email,
  null,
  credentials.private_key.replace(/\\n/g, '\n'),
  ['https://www.googleapis.com/auth/spreadsheets']
);

const sheets = google.sheets({ version: 'v4', auth: client });
const SPREADSHEET_ID = '1V4vJzrTitSLLzsUrFTu_cII-UuO23ohrQ5s_hBHPxs8';

// API Endpoint to get appointments
app.get('/appointments', async (req, res) => {
  try {
    const response = await sheets.spreadsheets.values.get({
      spreadsheetId: SPREADSHEET_ID,
      range: 'Appointments!A2:E',
    });
    res.json(response.data.values || []);
  } catch (error) {
    console.error('Error fetching appointments:', error.message);
    res.status(500).json({ error: 'Failed to fetch appointments' });
  }
});

// API Endpoint to add an appointment
app.post('/appointments', async (req, res) => {
  const { patient_name, doctor_name, appointment_date, appointment_time } = req.body;
  if (!patient_name || !doctor_name || !appointment_date || !appointment_time) {
    return res.status(400).json({ error: 'All fields are required' });
  }

  try {
    const newAppointment = [
      Date.now().toString(),
      patient_name,
      doctor_name,
      appointment_date,
      appointment_time,
    ];

    await sheets.spreadsheets.values.append({
      spreadsheetId: SPREADSHEET_ID,
      range: 'Appointments!A2:E',
      valueInputOption: 'RAW',
      insertDataOption: 'INSERT_ROWS',
      resource: { values: [newAppointment] },
    });

    res.status(201).json({ message: 'Appointment added successfully' });
  } catch (error) {
    console.error('Error adding appointment:', error.message);
    res.status(500).json({ error: 'Failed to add appointment' });
  }
});

// Fallback to serve React app for any unknown route
app.get('*', (req, res) => {
  res.sendFile(path.join(__dirname, 'frontend', 'doctor-dashboard', 'build', 'index.html'));
});

// Start server
app.listen(PORT, () => {
  console.log(`Server is running on http://localhost:${PORT}`);
});

// 1. ‡§Æ‡•â‡§°‡•ç‡§Ø‡•Ç‡§≤ ‡§á‡§Æ‡•ç‡§™‡•ã‡§∞‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç
const path = require('path');
require('dotenv').config({ path: path.resolve(__dirname, '../.env') });
const express = require('express');
const { Pool } = require('pg');
const { exec } = require('child_process');

const app = express();
const appointmentRoutes = require('./routes/appointmentRoutes'); // ‚úÖ ‡§∏‡§π‡•Ä ‡§™‡§•

// 2. JSON ‡§°‡•á‡§ü‡§æ ‡§ï‡•ã ‡§π‡•à‡§Ç‡§°‡§≤ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Æ‡§ø‡§°‡§≤‡§µ‡•á‡§Ø‡§∞
app.use(express.json());

// 3. PostgreSQL ‡§ï‡§®‡•á‡§ï‡•ç‡§∂‡§® ‡§∏‡•á‡§ü‡§Ö‡§™ (‡§Ö‡§¨ .env ‡§∏‡•á ‡§°‡§æ‡§ü‡§æ ‡§≤‡•á‡§ó‡§æ)
const pool = new Pool({
  user: process.env.DB_USER,
  host: process.env.DB_HOST,
  database: process.env.DB_NAME,
  password: process.env.DB_PASSWORD,
  port: process.env.DB_PORT,
});

// ‡§™‡§æ‡§∏‡§µ‡§∞‡•ç‡§° ‡§ï‡•ã ‡§∏‡§π‡•Ä ‡§∏‡•á ‡§™‡§¢‡§º‡§æ ‡§ó‡§Ø‡§æ ‡§Ø‡§æ ‡§®‡§π‡•Ä‡§Ç, ‡§Ø‡§π ‡§ö‡•á‡§ï ‡§ï‡§∞‡•á‡§Ç
console.log("üîë Database User:", process.env.DB_USER);
console.log("üîë Database Password:", process.env.DB_PASSWORD);
console.log("üîë Database Host:", process.env.DB_HOST);
console.log("üîë Database Name:", process.env.DB_NAME);
console.log("üîë Database Port:", process.env.DB_PORT);

// 4. ‡§°‡•á‡§ü‡§æ‡§¨‡•á‡§∏ ‡§ï‡§®‡•á‡§ï‡•ç‡§∂‡§® ‡§ü‡•á‡§∏‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç
pool.query('SELECT NOW()', (err, res) => {
  if (err) {
    console.error('‚ùå Database connection error:', err.message);
  } else {
    console.log('‚úÖ Database connected:', res.rows[0]);
  }
});

// 5. ‡§∞‡•Ä‡§ï‡•ç‡§µ‡•á‡§∏‡•ç‡§ü ‡§Æ‡•á‡§Ç ‡§°‡•á‡§ü‡§æ‡§¨‡•á‡§∏ ‡§ï‡§®‡•á‡§ï‡•ç‡§∂‡§® ‡§ú‡•ã‡§°‡§º‡•á‡§Ç
app.use((req, res, next) => {
  req.db = pool;
  next();
});

// 6. ‡§Ö‡§™‡•â‡§á‡§Ç‡§ü‡§Æ‡•á‡§Ç‡§ü ‡§∞‡•Ç‡§ü‡•ç‡§∏ ‡§Æ‡§æ‡§â‡§Ç‡§ü ‡§ï‡§∞‡•á‡§Ç
app.use('/api/appointments', appointmentRoutes);

// 7. ‡§´‡•ç‡§∞‡§Ç‡§ü‡§è‡§Ç‡§° ‡§´‡§æ‡§á‡§≤‡•ç‡§∏ ‡§∏‡§∞‡•ç‡§µ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è (React App ‡§ï‡•á ‡§≤‡§ø‡§è)
app.use(express.static(path.join(__dirname, 'frontend', 'public')));

app.get('*', (req, res) => {
  res.sendFile(path.join(__dirname, 'frontend', 'public', 'index.html'));
});

// 8. 404 ‡§π‡•à‡§Ç‡§°‡§≤‡§ø‡§Ç‡§ó
app.use((req, res) => {
  res.status(404).json({ error: 'Route not found' });
});

// 9. ‡§è‡§∞‡§∞ ‡§π‡•à‡§Ç‡§°‡§≤‡§ø‡§Ç‡§ó ‡§Æ‡§ø‡§°‡§≤‡§µ‡•á‡§Ø‡§∞
app.use((err, req, res, next) => {
  console.error('üî• Error:', err.message);
  res.status(500).json({ error: 'Internal Server Error' });
});

// 10. ‡§∏‡§∞‡•ç‡§µ‡§∞ ‡§∏‡•ç‡§ü‡§æ‡§∞‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç
const PORT = process.env.PORT || 3000;

// ‡§™‡§π‡§≤‡•á ‡§∏‡•á ‡§ö‡§≤ ‡§∞‡§π‡•á ‡§∏‡§∞‡•ç‡§µ‡§∞ ‡§ï‡•ã ‡§∞‡•ã‡§ï‡•á‡§Ç (‡§Ö‡§ó‡§∞ ‡§ï‡•ã‡§à ‡§π‡•à)
const startServer = () => {
  app.listen(PORT, () => {
    console.log(`üöÄ Server is running on http://localhost:${PORT}`);
  }).on('error', (err) => {
    if (err.code === 'EADDRINUSE') {
      console.error(`‚ùå Port ${PORT} is already in use. Trying to kill the process...`);
      exec(`netstat -ano | findstr :${PORT}`, (err, stdout) => {
        if (!err && stdout) {
          const pid = stdout.trim().split(/\s+/).pop();
          exec(`taskkill /F /PID ${pid}`, (err) => {
            if (!err) {
              console.log(`‚úÖ Process ${pid} killed successfully.`);
              startServer(); // ‡§∏‡§∞‡•ç‡§µ‡§∞ ‡§ï‡•ã ‡§∞‡•Ä‡§∏‡•ç‡§ü‡§æ‡§∞‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç
            } else {
              console.error('‚ùå Unable to kill process:', err.message);
              process.exit(1);
            }
          });
        } else {
          console.error('‚ùå No process found on port:', PORT);
          process.exit(1);
        }
      });
    } else {
      console.error('üî• Server error:', err.message);
    }
  });
};

startServer();
